#! /bin/bash

. /etc/ppb.conf
. ~/.config/ppb.conf



USAGE="Usage: $(basename $0) [-p <path_on_host>] [ -n -h ] <path>\n
	-p:	Path to upload to, relative to the target host home directory (defaults to PPB_PATH_ON_HOST as set in the config file).
	-a:	Paste file as is (do not apply ansifilter and do not change extension)\n
	-n:	Do not write output to clipboard (wl-clipboard and xclip).\n
	-h:	Displays help message.\n
	<path>:	Path to pastebin to be formatted.\n
"

# Read options:
while getopts "p:anh" flag
do
	case "$flag" in
		p)
			PPB_PATH_ON_HOST="$OPTARG"
			;;
		a)
			PASTE_AS_IS=1
			;;
		n)
			NO_CLIPBOARD=1
			;;
		h)
			echo -e "$USAGE"
			exit 0
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
done

# Configuration variables check
if [ -z ${PPB_TARGET_HOST+x} ]; then
	echo "ERROR: The PPB_TARGET_HOST variable is unset."
	echo "Nothing can be uploaded if there is no target host."
	echo "Please copy the example config file from under \"/etc/ppb.conf\" to \"~/.config/ppb.conf\","
	echo "and fill in the variable values according to your personal settings."
	exit 1
fi

if [ -z "$PPB_HTTP_PATH" ]; then
	PPB_HTTP_PATH=${PPB_PATH_ON_HOST}
fi

TARGET=${@:$OPTIND}

# Differential handling of files and piped output or file input with bash escape codes:
if [ -z "${TARGET}" ]; then
	TMP_FILE=1
	FILE_PATH="/var/tmp/ppb_$(date +%s).html"
	ansifilter -cH &> ${FILE_PATH}
elif [ "$PASTE_AS_IS" ]; then
	FILE_PATH=${TARGET}
elif grep -q "\[[0..9]\+m" ${TARGET}; then
	TMP_FILE=1
	FILE_PATH="/var/tmp/ppb_$(date +%s).html"
	ansifilter -cH ${TARGET} &> ${FILE_PATH}
elif [[ ! -f ${TARGET} ]]; then
	echo "There is no \"${TARGET}\" file to upload from your system."
	exit 1
else
	FILE_PATH=${TARGET}
fi

# Destination file name
FILEID=$(md5sum ${FILE_PATH})
DEST_FILE="${FILEID:0:6}"
FILE_BASENAME=$(basename ${FILE_PATH})
EXT="${FILE_BASENAME#*.}"
if [[ ! ${EXT} = ${FILE_BASENAME} ]]; then
	DEST_FILE="${DEST_FILE}.${EXT}"
fi

# Local file path fixing
if [[ "${FILE_PATH:0:1}" != "/" && "${FILE_PATH:0:1}" != "~" ]]; then
	FILE_PATH="./${FILE_PATH}"
fi


echo "rsync --chmod=644 -avPL ${FILE_PATH} ${PPB_TARGET_HOST}:${PPB_PATH_ON_HOST}/${DEST_FILE}"

# Upload
if rsync --chmod=644 -avPL "${FILE_PATH}" ${PPB_TARGET_HOST}:"${PPB_PATH_ON_HOST}/${DEST_FILE}" &> /dev/null ; then
	URL="https://${PPB_HTTP_PATH}/${DEST_FILE}"
	if [ -z "$NO_CLIPBOARD" ]; then
		wl-copy "${URL}"
		echo "${URL}" | xclip
		echo "Upload succeeded and URL added to clipboard:"
		echo "${URL}"
	else
		echo "Uploaded to:"
		echo "${URL}"
	fi
else
	echo ""
	echo "ERROR: Could not upload, please check the command below:"
	echo "rsync --chmod=644 -avP \"${FILE_PATH}\" ${PPB_TARGET_HOST}:\"${PPB_PATH_ON_HOST}/${DEST_FILE}\""
	if [[ ${TMP_FILE} = 1 ]]; then
		echo "The \"${FILE_PATH}\" file was created by PPB and intended as temporary."
		echo "We leave it in place to aid in your debugging, please remember to delete it."
	fi
	exit 1
fi

# Cleanup
if [[ ${TMP_FILE} = 1 ]]; then
	rm ${FILE_PATH}
fi
